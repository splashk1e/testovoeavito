version: "3.8"

services:
  backend:
    build:
      dockerfile: Dockerfile
      context: .
    container_name: backend-app
    depends_on:
      postgresql:
        condition: service_healthy  
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    environment:
      SERVER_ADDRESS: ${SERVER_ADDRESS}
      SERVER_PORT: ${SERVER_PORT}
      POSTGRES_CONN: ${POSTGRES_CONN}
      POSTGRES_JDBC_URL: ${POSTGRES_JDBC_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
    env_file:
      - .env
    networks:
      - backend-network

  postgresql: 
    image: postgres:14-alpine   
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./postgres/postgres.conf:/usr/local/etc/postgres/postgres.conf
      - ./postgres/postgres-data:/var/lib/postgresql/data
      - ./schema/000001_init.up.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s 
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
        - backend-network

  
networks:
    backend-network: 
        driver: bridge